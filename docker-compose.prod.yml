version: '3.9'
services:
  grafana-agent:
    container_name: grafana-agent
    image: grafana/agent:main
    volumes:
      - ./monitoring/grafana-agent-conf.yaml:/etc/agent/agent.yaml:ro
      - ./data/grafana:/etc/agent/data:rw
    environment:
      GRAFANA_USERNAME: ${GRAFANA_USERNAME}
      GRAFANA_API_KEY: ${GRAFANA_API_KEY}
      REMOTE_WRITE_HOST: ${REMOTE_WRITE_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    depends_on:
      - backend
      - database
    entrypoint:
      - /bin/grafana-agent
      - -config.file=/etc/agent/agent.yaml
      - -enable-features=integrations-next
      - -config.expand-env
    restart: always
  backend:
    extends:
      file: docker-compose.base.yml
      service: backend
    environment:
      spring_profiles_active: prod
      management.server.port: 8081
      spring.datasource.url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/poopstory
      spring.datasource.username: ${POSTGRES_USER}
      spring.datasource.password: ${POSTGRES_PASSWORD}
    logging:
      driver: loki
      options:
        loki-url: https://${LOG_AUTH}@${LOG_HOST}/loki/api/v1/push
    restart: always
  database:
    container_name: database
    image: postgis/postgis:15-3.3-alpine
    restart: always
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: poopstory
    logging:
      driver: loki
      options:
        loki-url: https://${LOG_AUTH}@${LOG_HOST}/loki/api/v1/push
        loki-pipeline-stages: |
          - docker: {}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:rw